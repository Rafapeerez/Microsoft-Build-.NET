@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    <EditForm  EditContext=editContext OnValidSubmit=PlaceOrder >
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (isError) {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>
        <button class="checkout-button btn btn-warning" type="Submit" disabled=@isError>
            Place order
        </button>
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting;
     bool isError = false;
     private EditContext editContext;
    protected void ShowError(){
        isError = true;
    }
    async Task PlaceOrder(){
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId= await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    } 

    //This code also allows for linking an event handler to when a field is changed. 
    //In the new handler, you can check to see if the model is valid and set the isError appropriately.
    protected override void OnInitialized(){
        editContext = new(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e){
        isError = !editContext.Validate();
        StateHasChanged();
    }

    //Because we've now created an event handler, we should dispose of it when the checkout component no longer needs it.
    public void Dispose(){
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}