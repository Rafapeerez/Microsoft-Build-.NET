{"ast":null,"code":"var _jsxFileName = \"/home/rafa/moduley24/pizza-web/src/Main.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PizzaFrame = styled.div`\n    border: solid 1px gray;\n    padding: 10px;\n    margin: 15px 10px;\n    border-radius: 5px;\n    box-shadow: 0 0 5px grey;\n    font-family: Arial;\n`;\n_c = PizzaFrame;\nconst Input = styled.input`\n    border: solid 1px black;\n    padding: 5px;\n    border-radius: 3px;\n`;\n_c2 = Input;\nconst Title = styled(Input)`\n    text-transform: uppercase;\n`;\n_c3 = Title;\nconst Save = styled.button`\n   width: 100px;\n   margin: 10px;\n   background: green;\n   color: white;\n   font-size: 16px;\n   padding: 10px;\n   border-radius: 5px;\n`;\n\n//Pizza Component: capable of rendering the Pizza object. It also listens to changes from input and runs the update() function, if either text field changes.\n_c4 = Save;\nconst Pizza = _ref => {\n  _s();\n  let {\n    pizza\n  } = _ref;\n  const [data, setData] = useState(pizza);\n  const [dirty, setDirty] = useState(false);\n  function update(value, fieldName, obj) {\n    setData({\n      ...obj,\n      [fieldName]: value\n    });\n    setDirty(true);\n  }\n  function onSave() {\n    setDirty(false);\n    // make REST call\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PizzaFrame, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Title, {\n          onChange: evt => update(evt.target.value, 'name', data),\n          value: data.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          onChange: evt => update(evt.target.value, 'description', data),\n          value: data.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), dirty ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Save, {\n          onClick: onSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n//Dirty variable keeps track of whether a user has attempted to change the input.\n\n//Main Component: renders the initial data, a list of pizzas.\n_s(Pizza, \"8YZzlTup+X2vdTZKtlDI6NHxZy4=\");\n_c5 = Pizza;\nconst Main = () => {\n  _s2();\n  const [pizzas, setPizzas] = useState([]); //Create a state with a list pizzas and a method to change the content in pizzas called setPizzas().\n\n  //call side effects\n  useEffect(() => {\n    fetchData(); //triggers a call to API, which in turn fetches your data from the backend, and ends up calling setPizzas() to update React app.\n  }, []);\n  function fetchData() {\n    fetch(\"/pizzas\").then(response => response.json()).then(data => setPizzas(data));\n  }\n  const data = pizzas.map(pizza => /*#__PURE__*/_jsxDEV(Pizza, {\n    pizza: pizza\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 38\n  }, this));\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: pizzas.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No pizzas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 13\n  }, this);\n};\n_s2(Main, \"3BCdXLfN05f9NhBC3nZ0dCu6pjI=\");\n_c6 = Main;\nexport default Main;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"PizzaFrame\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Title\");\n$RefreshReg$(_c4, \"Save\");\n$RefreshReg$(_c5, \"Pizza\");\n$RefreshReg$(_c6, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","PizzaFrame","div","_c","Input","input","_c2","Title","_c3","Save","button","_c4","Pizza","_ref","_s","pizza","data","setData","dirty","setDirty","update","value","fieldName","obj","onSave","Fragment","children","onChange","evt","target","name","fileName","_jsxFileName","lineNumber","columnNumber","description","onClick","_c5","Main","_s2","pizzas","setPizzas","fetchData","fetch","then","response","json","map","length","_c6","$RefreshReg$"],"sources":["/home/rafa/moduley24/pizza-web/src/Main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst PizzaFrame = styled.div`\n    border: solid 1px gray;\n    padding: 10px;\n    margin: 15px 10px;\n    border-radius: 5px;\n    box-shadow: 0 0 5px grey;\n    font-family: Arial;\n`;\n\nconst Input = styled.input`\n    border: solid 1px black;\n    padding: 5px;\n    border-radius: 3px;\n`;\n\nconst Title = styled(Input)`\n    text-transform: uppercase;\n`;\n\nconst Save = styled.button`\n   width: 100px;\n   margin: 10px;\n   background: green;\n   color: white;\n   font-size: 16px;\n   padding: 10px;\n   border-radius: 5px;\n`;\n\n//Pizza Component: capable of rendering the Pizza object. It also listens to changes from input and runs the update() function, if either text field changes.\nconst Pizza = ({ pizza }) => {\n    const [data, setData] = useState(pizza);\n    const [dirty, setDirty] = useState(false);\n\n    function update(value, fieldName, obj) {\n        setData({ ...obj, [fieldName]: value });\n        setDirty(true);\n    }\n    function onSave() {\n        setDirty(false);\n        // make REST call\n    }\n\n    return (\n        <React.Fragment>\n            <PizzaFrame>\n                <h3>\n                    <Title onChange={(evt) => update(evt.target.value, 'name', data)} value={data.name} />\n                </h3>\n                <div>\n                    <Input onChange={(evt) => update(evt.target.value, 'description', data)} value={data.description} />\n                </div>\n                {dirty ?\n                    <div><Save onClick={onSave}>Save</Save></div> : null\n                }\n            </PizzaFrame>\n        </React.Fragment>\n    )\n}\n//Dirty variable keeps track of whether a user has attempted to change the input.\n\n\n//Main Component: renders the initial data, a list of pizzas.\nconst Main = () => {\n    const [pizzas, setPizzas] = useState([]); //Create a state with a list pizzas and a method to change the content in pizzas called setPizzas().\n\n    //call side effects\n    useEffect(() => { \n        fetchData(); //triggers a call to API, which in turn fetches your data from the backend, and ends up calling setPizzas() to update React app.\n    }, [])\n\n    function fetchData() {\n        fetch(\"/pizzas\")\n            .then(response => response.json())\n            .then(data => setPizzas(data)) \n    }\n\n    const data = pizzas.map(pizza => <Pizza pizza={pizza} />)\n\n    return (<React.Fragment>\n        {pizzas.length === 0 ?\n            <div>No pizzas</div> :\n            <div>{data}</div>\n        }\n   </React.Fragment>)\n}\n\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}