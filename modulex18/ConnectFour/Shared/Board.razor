@inject ConnectFour.Shared.GameState State; //We can now start connecting our Board component to the state of the game.
@using System.Drawing

<HeadContent>
 <style>
  :root {
   --board-bg: @ColorTranslator.ToHtml(BoardColor);
   --player1: @ColorTranslator.ToHtml(Player1Color);
   --player2: @ColorTranslator.ToHtml(Player2Color);
  }
 </style>
</HeadContent>

<nav>
	<span title="Click to play a piece" @onclick="() => PlayPiece(1)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(2)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(3)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(4)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(5)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(6)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(7)">ðŸ”½</span>
</nav>

<article>
	@WinnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
	<br />
	<span class="alert-danger">@ErrorMessage</span>
	<span class="alert-info">@CurrentTurn</span>
</article>

<div clas>
    <div class="board">
        @for(var i=0; i<42; i++){
            <span class="container">
                <span></span>
            </span>
        }
        @for(var i=0; i<42; i++){
            <span class="@Pieces[i]"></span>
        }
    </div>
</div>

@code{
    private string[] Pieces = new string[42];
	private string WinnerMessage = string.Empty;

	private string ErrorMessage = string.Empty;

	//automatically calculated based on the state of the WinnerMessage and the PlayerTurn property of the GameState.
	private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

	//calculated based on contents of the WinnerMessage. If there's a WinnerMessage, we make the reset button appear on screen.
	private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";

    private void PlayPiece(byte col){
		ErrorMessage = string.Empty;
    	try{
 			var landingRow = State.PlayPiece(col);
 			var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
 			Pieces[State.CurrentTurn - 1] = cssClass;
 		}
 		catch (ArgumentException ex){
 			ErrorMessage = ex.Message;
 		}

		WinnerMessage = State.CheckForWin() switch{
			GameState.WinState.Player1_Wins => "Player 1 Wins!",
			GameState.WinState.Player2_Wins => "Player 2 Wins!",
			GameState.WinState.Tie => "It's a tie!",
			_ => ""
		};
    }

	[Parameter()]
	public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

	[Parameter()]
	public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

	[Parameter()]
	public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    void ResetGame(){
		State.ResetBoard(); //reset the state of the board
		WinnerMessage = string.Empty; //hide our indicators.
		ErrorMessage = string.Empty; //hide our indicators.
		Pieces = new string[42]; //reset the Pieces array to an empty array of 42 strings.
	}

}

